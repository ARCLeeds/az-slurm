{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "extraSlurmConfig": {
      "type": "string"
    },
    "partitions": {
      "type": "array"
    },
    "userGroupID": {
      "type": "string",
      "metadata": {
        "description": "Group to allow user logins"
      }
    },
    "adminGroupID": {
      "type": "string",
      "metadata": {
        "description": "Group to allow user logins and sudo"
      }
    },
    "servicePrincipalID": {
      "type": "string",
      "metadata": {
        "description": "ServicePrincipal ID"
      }
    },
    "servicePrincipalObjectID": {
      "type": "string",
      "metadata": {
        "description": "ServicePrincipal Object ID"
      }
    },
    "servicePrincipalSecret": {
      "type": "string",
      "metadata": {
        "description": "ServicePrincipal Secret"
      }
    },
    "notActions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Array of notActions for the roleDefinition"
      }
    },
    "roleName": {
      "type": "string",
      "defaultValue": "Custom Role - RG Reader",
      "metadata": {
        "description": "Friendly name of the role definition"
      }
    },
    "roleDescription": {
      "type": "string",
      "defaultValue": "Subscription Level Deployment of a Role Definition",
      "metadata": {
        "description": "Detailed description of the role definition"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Virtual Machine. Pick a valid username otherwise there will be a BadRequest error."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "[concat('P', uniqueString(resourceGroup().id, 'a67e5975-3c34-42a1-94d9-3ac88b7410d8'), 'x', '!')]",
      "metadata": {
        "description": "Admin password. Pick a complex password with uppercase letters, lowercase letters, digits, and symbols. The password should not be longer than 16. Otherwise you'll get a BadRequest error."
      }
    },
    "headNodeSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "allowedValues": [
        "Standard_B2s",
        "Standard_D2_v2",
        "Standard_G1",
        "Standard_D11_v2"
      ],
      "metadata": {
        "description": "Size of the head node."
      }
    },
    "numDataDisks": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 63,
      "metadata": {
        "description": "Number of luns to assign as data disks to combine in NFS export"
      }
    },
    "sizeDataDisks": {
      "type": "int",
      "defaultValue": "1",
      "metadata": {
        "description": "Size of lun to assign as data disks to combine in NFS export"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      },
      "defaultValue": "https://raw.githubusercontent.com/ARCLeeds/az-slurm/main/CentOS/"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      },
      "defaultValue": ""
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "dnsName": "[concat('slurm-', uniqueString(resourceGroup().id))]",
    "imagePublisher": "OpenLogic",
    "headImageOffer": "CentOS",
    "centOSVersion": "7_7-gen2",
    "publicIPAddressName": "publicip",
    "vmNameMaster": "master",
    "nicNameMaster": "nic",
    "networkSettings": {
      "virtualNetworkName": "virtualnetwork",
      "addressPrefix": "10.0.0.0/16",
      "subnet": {
        "dse": {
          "name": "dse",
          "prefix": "10.0.0.0/16",
          "vnet": "virtualnetwork"
        }
      },
      "statics": {
        "workerRange": {
          "base": "10.0.",
          "start": 5
        },
        "master": "10.0.0.254"
      }
    },
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('networkSettings').virtualNetworkName, variables('networkSettings').subnet.dse.name)]",
    "installationCLI": "[concat('sh azuredeploy.sh ', variables('vmNameMaster'), ' ', variables('networkSettings').statics.master, ' ', variables('networkSettings').statics.workerRange.base, ' ', variables('networkSettings').statics.workerRange.start, ' ', parameters('adminUsername'), ' ', parameters('adminPassword'), ' ', parameters('_artifactsLocation'), ' ', resourceGroup().name, ' ', subscription().tenantId, ' ', parameters('servicePrincipalID'), ' ', parameters('servicePrincipalSecret'), ' ', base64(string(parameters('partitions'))), ' ', base64(parameters('extraSlurmConfig')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-09-01",
      "name": "[concat('partitionDeployment-', copyIndex())]",
      "copy": {
        "name": "deployPartitionsLoop",
        "count": 2
      },
      "dependsOn": [
        "[variables('networkSettings').virtualNetworkName]",
        "Installation"
      ],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "NodeSize": {
            "value": "[parameters('partitions')[copyIndex()].NodeSize]"
          },
          "ppgName": {
            "value": "[concat('ppg-', parameters('partitions')[copyIndex()].name)]"
          },
          "nicName": {
            "value": "[concat('nic-', parameters('partitions')[copyIndex()].name)]"
          },
          "networkSettings": {
            "value": {
              "virtualNetworkName": "virtualnetwork",
              "addressPrefix": "10.0.0.0/16",
              "subnet": {
                "dse": {
                  "name": "dse",
                  "prefix": "10.0.0.0/16",
                  "vnet": "virtualnetwork"
                }
              },
              "statics": {
                "workerRange": {
                  "base": "[concat('10.0.', copyIndex(), '.')]",
                  "start": 5
                },
                "master": "10.0.0.254"
              }
            }
          },
          "scaleNumber": {
            "value": "[parameters('partitions')[copyIndex()].scaleNumber]"
          },
          "subnetRef": {
            "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('networkSettings').virtualNetworkName, variables('networkSettings').subnet.dse.name)]"
          },
          "vmName": {
            "value": "[parameters('partitions')[copyIndex()].name]"
          },
          "ImageOffer": {
            "value": "[parameters('partitions')[copyIndex()].ImageOffer]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
	  "servicePrincipalObjectID": {
	    "value": "[parameters('servicePrincipalObjectID')]"
	  },
	  "servicePrincipalSecret": {
	    "value": "[parameters('servicePrincipalSecret')]"
	  },
	  "centOSVersion": {
	    "value": "[variables('centOSVersion')]"
	  },
          "nvidia": {
            "value": "[contains(parameters('partitions')[copyIndex()], 'nvidia')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "NodeSize": {
              "type": "string"
            },
            "ppgName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "nicName": {
              "type": "string"
            },
            "scaleNumber": {
              "type": "int"
            },
            "networkSettings": {
              "type": "object"
            },
            "subnetRef": {
              "type": "string"
            },
            "vmName": {
              "type": "string"
            },
            "imagePublisher": {
              "type": "string",
              "defaultValue": "OpenLogic"
            },
            "ImageOffer": {
              "type": "string"
            },
            "centOSVersion": {
              "type": "string",
              "defaultValue": "7_8-gen2"
            },
            "adminUsername": {
              "type": "string"
	    },
            "adminPassword": {
              "type": "string"
	    },
            "_artifactsLocation": {
              "type": "string"
	    },
            "_artifactsLocationSasToken": {
              "type": "string"
	    },
	    "servicePrincipalObjectID": {
	      "type": "string"
	    },
	    "servicePrincipalSecret": {
	      "type": "string"
	    },
	    "nvidia": {
	      "type": "bool"
	    }
          },
          "resources": [
            {
              "apiVersion": "2020-06-01",
              "type": "Microsoft.Compute/proximityPlacementGroups",
              "name": "[parameters('ppgName')]",
              "location": "[parameters('location')]"
            },
            {
              "apiVersion": "2020-06-01",
              "type": "Microsoft.Network/networkInterfaces",
              "name": "[concat(parameters('nicName'), copyindex())]",
              "location": "[parameters('location')]",
              "copy": {
                "name": "nicLoop2",
                "count": "[parameters('scaleNumber')]"
              },
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Static",
                      "privateIPAddress": "[concat(parameters('networkSettings').statics.workerRange.base, copyindex(parameters('networkSettings').statics.workerRange.start))]",
                      "subnet": {
                        "id": "[parameters('subnetRef')]"
                      }
                    }
                  }
                ]
              }
            },
            {
              "apiVersion": "2020-06-01",
              "type": "Microsoft.Compute/virtualMachines",
              "name": "[concat(parameters('vmName'), copyindex())]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "nicLoop2",
                "[parameters('ppgName')]"
              ],
              "copy": {
                "name": "foo",
                "count": "[parameters('scaleNumber')]"
              },
              "properties": {
                "proximityPlacementGroup": {
                  "id": "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('ppgName'))]"
                },
                "hardwareProfile": {
                  "vmSize": "[parameters('NodeSize')]"
                },
                "osProfile": {
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "computerName": "[concat(parameters('vmName'), copyindex())]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "[parameters('imagePublisher')]",
                    "offer": "[parameters('ImageOffer')]",
                    "sku": "[parameters('centOSVersion')]",
                    "version": "latest"
                  },
                  "osDisk": {
                    "name": "[concat(parameters('vmName'), copyindex(),'_OSDisk')]",
                    "caching": "ReadOnly",
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "Standard_LRS"
                    }
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('nicName'), copyindex()))]"
                    }
                  ]
                }
              },
              "resources": [
                {
                  "apiVersion": "2020-04-01-preview",
                  "name": "[concat(parameters('vmName'), copyindex(), '/Microsoft.Authorization/', guid(resourceGroup().id, concat(parameters('vmName'), copyindex())))]",
                  "type": "Microsoft.Compute/virtualMachines/providers/roleAssignments",
                  "properties": {
                    "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                    "principalId": "[parameters('servicePrincipalObjectID')]"
                  },
                  "dependsOn": [
                    "[concat('Microsoft.Compute/virtualMachines/',parameters('vmName'), copyindex())]"
                  ]
                },
              {
                "name": "AADLoginForLinux",
                "type": "extensions",
                "apiVersion": "2020-06-01",
                "location": "[parameters('location')]",
                "properties": {
                  "publisher": "Microsoft.Azure.ActiveDirectory.LinuxSSH",
                  "type": "AADLoginForLinux",
                  "typeHandlerVersion": "1.0",
                  "autoUpgradeMinorVersion": true
                },
                "dependsOn": [
                  "[concat('Microsoft.Compute/virtualMachines/',parameters('vmName'), copyindex())]"
                ]
              },
              {
                "name": "nvidia",
                "condition": "[parameters('nvidia')]",
                "type": "extensions",
                "apiVersion": "2015-06-15",
                "location": "[parameters('location')]",
                "dependsOn": [
                  "[concat('Microsoft.Compute/virtualMachines/',parameters('vmName'), copyindex())]",
                  "AADLoginForLinux"
                ],
                "properties": {
                  "publisher": "Microsoft.HpcCompute",
                  "type": "NvidiaGpuDriverLinux",
                  "typeHandlerVersion": "1.3",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                  }
                }
              },
              {
                "apiVersion": "2020-06-01",
                "type": "extensions",
                "name": "WorkerInstallation",
                "location": "[parameters('location')]",
                "dependsOn": [
                  "[concat('Microsoft.Compute/virtualMachines/',parameters('vmName'), copyindex())]"
                ],
                "properties": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": [
                      "[concat(parameters('_artifactsLocation'), 'workerdeploy.sh', parameters('_artifactsLocationSasToken'))]"
                    ]
                  },
                  "protectedSettings": {
                    "commandToExecute": "sh workerdeploy.sh"
                  }
                }
              }
              ]
            }
          ],
          "outputs": {
            "testVar": {
              "type": "string",
              "value": "[parameters('NodeSize')]"
            }
          }
        }
      }
    },
    {
      "apiVersion": "2020-06-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('networkSettings').virtualNetworkName]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('networkSettings').addressPrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('networkSettings').subnet.dse.name]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnet.dse.prefix]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-06-01",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsName')]"
        }
      }
    },
    {
      "apiVersion": "2020-06-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicNameMaster')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('publicIPAddressName')]",
        "[variables('networkSettings').virtualNetworkName]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('networkSettings').statics.master]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-06-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmNameMaster')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[variables('nicNameMaster')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('headNodeSize')]"
        },
        "osProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "computerName": "[variables('vmNameMaster')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('headImageOffer')]",
            "sku": "[variables('centOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmNameMaster'),'_OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          },
          "copy": [
            {
              "name": "dataDisks",
              "count": "[parameters('numDataDisks')]",
              "input": {
                "name": "[concat('datadisk-',copyIndex('dataDisks'))]",
                "caching": "ReadWrite",
                "lun": "[copyIndex('dataDisks')]",
                "diskSizeGB": "[parameters('sizeDataDisks')]",
                "createOption": "Empty",
                "managedDisk": {
                  "storageAccountType": "Standard_LRS"
                }
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicNameMaster'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2020-04-01-preview",
          "name": "[concat(variables('vmNameMaster'), '/Microsoft.Authorization/', guid(resourceGroup().id, variables('vmNameMaster'), 'userGroup'))]",
          "type": "Microsoft.Compute/virtualMachines/providers/roleAssignments",
          "properties": {
            "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
            "principalId": "[parameters('userGroupID')]"
          },
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/',variables('vmNameMaster'))]"
          ]
        },
        {
          "apiVersion": "2020-04-01-preview",
          "name": "[concat(variables('vmNameMaster'), '/Microsoft.Authorization/', guid(resourceGroup().id, variables('vmNameMaster'), 'adminGroup'))]",
          "type": "Microsoft.Compute/virtualMachines/providers/roleAssignments",
          "properties": {
            "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
            "principalId": "[parameters('adminGroupID')]"
          },
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/',variables('vmNameMaster'))]"
          ]
        },
        {
          "name": "[concat(variables('vmNameMaster'),'/', 'AADLoginForLinux')]",
          "type": "Microsoft.Compute/virtualMachines/extensions",
          "apiVersion": "2020-06-01",
          "location": "[parameters('location')]",
          "properties": {
            "publisher": "Microsoft.Azure.ActiveDirectory.LinuxSSH",
            "type": "AADLoginForLinux",
            "typeHandlerVersion": "1.0",
            "autoUpgradeMinorVersion": true
          },
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/',variables('vmNameMaster'))]"
          ]
        },
        {
          "apiVersion": "2020-06-01",
          "type": "extensions",
          "name": "Installation",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[variables('vmNameMaster')]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('_artifactsLocation'), 'azuredeploy.sh', parameters('_artifactsLocationSasToken'))]"
              ]
            },
            "protectedSettings": {
              "commandToExecute": "[variables('installationCLI')]"
            }
          }
        }
      ]
    }
  ],
  "outputs": {
    "dnsName": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
    },
    "adminPassword": {
      "type": "string",
      "value": "[parameters('adminPassword')]"
    }
  }
}
